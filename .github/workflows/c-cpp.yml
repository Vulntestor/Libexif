name: C/C++ CI

on:
  push:
    branches: [ main, master, add-github-action-for-CI ]
  pull_request:
    branches: [ main, master, add-github-action-for-CI ]

env:
  V: 1

jobs:
  buildx:

    runs-on: ${{ matrix.os }}

    name: '${{ matrix.os }} ${{ matrix.compiler }} ${{ matrix.c-standard }} buildx'

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        c-standard: [ c90, c99 ]
        include:
          - os: ubuntu-latest
            compiler: gcc
            all-warnings: '-Wall -Wextra'
          - os: ubuntu-latest
            compiler: clang
            all-warnings: '-Wall -Wextra -Weverything'
          - os: macos-latest
            compiler: clang
            all-warnings: '-Wall -Wextra -Weverything'

    env:
      CFLAGS_ERROR:   '-std=${{ matrix.c-standard }} ${{ matrix.all-warnings }} -Werror'
      CFLAGS_NOERROR: '-std=${{ matrix.c-standard }} ${{ matrix.all-warnings }}'

    steps:
      - name: 'Show CFLAGS'
        run: |
          echo "runner.os=${{ runner.os }}"
          echo "matrix.os=${{ matrix.os }}"
          echo "matrix.c-standard=${{ matrix.c-standard }}"
          echo "matrix.all-warnings=${{ matrix.all-warnings }}"
          echo "matrix.compiler=${{ matrix.compiler }}"
          printenv | grep ^CFLAGS
          exit 1

      - uses: actions/checkout@v2
        with:
          fetch-depth: 10

      - name: 'Install Software (Linux)'
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install autopoint gettext doxygen graphviz ${{ matrix.compiler }}

      - name: 'Install Software (MacOS)'
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install automake doxygen graphviz

      - name: 'autoreconf'
        run: autoreconf -vis .

      - name: 'configure'
        run: ./configure
        env:
          CFLAGS: ${{ env.CFLAGS_NOERROR }}

      - name: 'make'
        run: make
        env:
          CFLAGS: ${{ env.CFLAGS_ERROR }}

      - name: 'make check'
        run: make check
        env:
          CFLAGS: ${{ env.CFLAGS_ERROR }}

      - name: 'make distcheck'
        run: make distcheck
        env:
          CFLAGS: ${{ env.CFLAGS_NOERROR }}

      - name: 'dist tarball content'
        run: for tarball in *.tar.*; do tar tvf "$tarball"; break; done

  windows-build:
    runs-on: windows-latest

    # See https://github.com/msys2/setup-msys2

    strategy:
      fail-fast: false
      matrix:
        include:
          - sys: mingw32
            env: i686
          - sys: mingw64
            env: x86_64
          - sys: ucrt64         # Experimental!
            env: ucrt-x86_64
          - sys: clang64        # Experimental!
            env: clang-x86_64

    name: 'MSYS2 ${{ matrix.sys }} build'

    env:
      MINGW_ARCH: ${{ matrix.sys }}

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: 'cmd shell environment info'
        shell: cmd
        run: |
          path
          echo %PATH%
          set

      - name: 'Abort quickly'
        shell: bash
        run: |
          echo "matrix.os=${{ matrix.os }}"
          echo "matrix.env=${{ matrix.env }}"
          echo "matrix.sys=${{ matrix.sys }}"
          echo "MINGW_ARCH=${MINGW_ARCH}"
          echo "0={0}"
          printenv | grep ^CFLAGS
          exit 1

      - name: 'git config'
        run:  git config --global core.autocrlf input
        shell: bash

      - uses: actions/checkout@v2
        with:
          fetch-depth: 10

      - name: 'Setup MSYS2 and Install Software'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          update: true
          install: >-
            git
            autoconf
            automake
            diffutils
            gettext-devel
            intltool
            libtool
            make
            patchutils
            pkgconf
            doxygen
            zip
            mingw-w64-${{ matrix.env }}-graphviz
            mingw-w64-${{ matrix.env }}-gcc

      - name: 'autoreconf'
        run: autoreconf -vis .

      - name: 'configure'
        run: ./configure

      - name: 'make'
        run: make

      - name: 'make check'
        run: make check

      - name: 'make distcheck'
        run: make distcheck

      - name: 'dist tarball content'
        run: for tarball in *.tar.*; do tar tvf "$tarball"; break; done
